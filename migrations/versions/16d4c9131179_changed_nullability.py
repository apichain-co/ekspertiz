from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '16d4c9131179'
down_revision = '04ba5db02453'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # Using batch mode to alter 'appointment' table
    with op.batch_alter_table('appointment', schema=None) as batch_op:
        batch_op.alter_column('brand',
                              existing_type=sa.VARCHAR(length=50),
                              nullable=True)
        batch_op.alter_column('model',
                              existing_type=sa.VARCHAR(length=50),
                              nullable=True)

    # Using batch mode to alter 'vehicle' table
    with op.batch_alter_table('vehicle', schema=None) as batch_op:
        batch_op.alter_column('color',
                              existing_type=sa.VARCHAR(length=5),
                              type_=sa.Enum('BEIGE', 'WHITE', 'BURGUNDY', 'SMOKE', 'GRAY', 'SILVER_GRAY', 'BROWN', 'RED', 'NAVY_BLUE', 'BLUE', 'PURPLE', 'PINK', 'YELLOW', 'BLACK', 'CHAMPAGNE', 'TURQUOISE', 'ORANGE', 'GREEN', name='color'),
                              existing_nullable=False)
        batch_op.alter_column('transmission_type',
                              existing_type=sa.VARCHAR(length=16),
                              type_=sa.Enum('MANUAL', 'AUTOMATIC', 'SEMI_AUTOMATIC', name='transmissiontype'),
                              existing_nullable=False)

    # Creating foreign key constraint in a SQLite-compatible way
    with op.batch_alter_table('expertise_feature', schema=None) as batch_op:
        batch_op.create_foreign_key('fk_expertise_report', 'expertise_report', ['expertise_report_id'], ['id'])

    # Conditionally dropping the 'expertise_feature_old' table if it exists
    op.execute('DROP TABLE IF EXISTS expertise_feature_old')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # Using batch mode to revert changes to 'vehicle' table
    with op.batch_alter_table('vehicle', schema=None) as batch_op:
        batch_op.alter_column('transmission_type',
                              existing_type=sa.Enum('MANUAL', 'AUTOMATIC', 'SEMI_AUTOMATIC', name='transmissiontype'),
                              type_=sa.VARCHAR(length=16),
                              existing_nullable=False)
        batch_op.alter_column('color',
                              existing_type=sa.Enum('BEIGE', 'WHITE', 'BURGUNDY', 'SMOKE', 'GRAY', 'SILVER_GRAY', 'BROWN', 'RED', 'NAVY_BLUE', 'BLUE', 'PURPLE', 'PINK', 'YELLOW', 'BLACK', 'CHAMPAGNE', 'TURQUOISE', 'ORANGE', 'GREEN', name='color'),
                              type_=sa.VARCHAR(length=5),
                              existing_nullable=False)

    # Dropping the foreign key constraint in a SQLite-compatible way
    with op.batch_alter_table('expertise_feature', schema=None) as batch_op:
        batch_op.drop_constraint('fk_expertise_report', type_='foreignkey')

    # Using batch mode to revert changes to 'appointment' table
    with op.batch_alter_table('appointment', schema=None) as batch_op:
        batch_op.alter_column('model',
                              existing_type=sa.VARCHAR(length=50),
                              nullable=False)
        batch_op.alter_column('brand',
                              existing_type=sa.VARCHAR(length=50),
                              nullable=False)

    # Recreating the 'expertise_feature_old' table if needed
    op.create_table('expertise_feature_old',
                    sa.Column('id', sa.INTEGER(), nullable=False),
                    sa.Column('feature_name', sa.VARCHAR(length=50), nullable=False),
                    sa.Column('status', sa.INTEGER(), nullable=False),
                    sa.PrimaryKeyConstraint('id')
                    )

    # ### end Alembic commands ###
